from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import InlineKeyboardMarkup, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from dotenv import load_dotenv
import os
import hashlib

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TG_TOKEN')
lang = 'ru'

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    inline_frame = [[InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                    [InlineKeyboardButton("English", callback_data="lang_en")]]
    # —Å–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = InlineKeyboardMarkup(inline_frame)

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/Choose language:', reply_markup=inline_keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def lang_button(update: Update, _):
    # –ø–æ–ª—É—á–∞–µ–º callback query –∏–∑ update
    global lang
    query = update.callback_query

    if query.data == 'lang_ru':
      lang = 'ru'
    elif query.data == 'lang_en':    
      lang = 'en'

    # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if lang == 'ru': 
        await query.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!')
        await query.edit_message_text(text=f"üá∑üá∫")
    elif lang == 'en':     
        await query.answer('You choosed english language!')
        await query.edit_message_text(text=f"üá∫üá∏")
    

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text(update, context):
    global lang
    if lang == 'ru': 
        await update.message.reply_text(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! {lang}")
    elif lang == 'en':     
        await update.message.reply_text("We‚Äôve received a message from you!")

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help(update, context):
    await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è‚ùó")

def get_hashed_filename(url, ext='.jpg'):
    md5_hash = hashlib.md5(url.encode()).hexdigest()  # –ü–æ–ª—É—á–∞–µ–º MD5 —Ö—ç—à URL
    return md5_hash + ext  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async def image(update, context):
    global lang
    if lang == 'ru': 
        await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    elif lang == 'en':     
        await update.message.reply_text("Photo saved!")

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∞–ø–¥–µ–π—Ç–∞
    file = await update.message.photo[-1].get_file()
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
    if not os.path.exists("photos/"):
        os.mkdir("photos/")
    await file.download_to_drive("photos/" + get_hashed_filename(file.file_path,'.jpg'))


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def voice(update, context):
    global lang
    if lang == 'ru': 
        #await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
        await context.bot.sendPhoto(chat_id=update.effective_chat.id, photo="voice.jpg", caption="–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

    elif lang == 'en':     
        await context.bot.sendPhoto(chat_id=update.effective_chat.id, photo="voice.jpg", caption="We‚Äôve received a voice message from you!")


def main():

    # —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –¥–æ–±–∞–≤–ª—è–µ–º CallbackQueryHandler (—Ç–æ–ª—å–∫–æ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
    application.add_handler(CallbackQueryHandler(lang_button))

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    application.add_handler(CommandHandler("help", help))

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT, text))

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    application.add_handler(MessageHandler(filters.PHOTO, image))

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, voice))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–Ω–∞–∂–∞—Ç—å Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞)
    application.run_polling()
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


if __name__ == "__main__":
    main()